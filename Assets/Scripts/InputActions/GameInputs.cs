//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystems/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerKeyBoard"",
            ""id"": ""e5dcd767-8cd6-4e83-858a-bf353bc4d203"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""08b0fdb2-b43c-499e-aef2-a6ce6cbcf485"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""307b18ba-fffc-4838-8231-0e3189417cf1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sliding"",
                    ""type"": ""Button"",
                    ""id"": ""7d6267f4-748a-41bd-8945-1f6a66eed025"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Vec3"",
                    ""id"": ""4a52ea19-2dd9-4f78-9cb0-ed8f7d8a2fce"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ae73b248-d137-439e-9720-9b70c8ddd782"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""881c161c-8cca-4425-b1aa-6d2ecaa58f0d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e6d12bbf-483a-4e72-828d-86a1bc45f26b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""04d9cc25-0a0e-4808-bd14-fd4b547d447f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""71b3f99e-52fd-4edf-8dc6-609e628898fd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""987a688d-5bc1-49de-a4bc-9d26c097e670"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""676dcc3a-fe57-4d55-a77a-d6c37b2a0335"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01a2548b-fe38-4181-9874-6c378b3ed57c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sliding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerGamePad"",
            ""id"": ""5ecef508-3787-4c22-9ee6-a015af7f684a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bc0f24ee-1ea5-458b-9896-6f399fce9cfa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0f375acf-7ad2-4948-83a8-3447935a70f9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sliding"",
                    ""type"": ""Button"",
                    ""id"": ""e8b40a18-13e9-4e26-8170-2b534a2b6b1a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Perspective"",
                    ""type"": ""Value"",
                    ""id"": ""b9492764-8c07-4eef-9d54-f5a801b76ff8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Vec3"",
                    ""id"": ""13c1e36f-f9a2-4bd1-982d-3d0b1fb79715"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8657c7fc-b3bb-4854-8d3a-901c564931ef"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7665be06-a496-4765-94b2-2b0b881811ea"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""28a2c26f-4fef-46fc-8fc8-62941b7e88bb"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e206016b-cb40-489f-888e-68716ef92079"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""364a08cb-6ca3-4125-be84-e3dfc8d8ef37"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""b79353b8-a3fb-4d75-8129-b21fa26be4af"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5686da28-5f54-4739-af44-b25dde2437a5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b9ff1e1-cd5a-435f-96b3-496733746933"",
                    ""path"": ""<SwitchProControllerHID>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sliding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vec2"",
                    ""id"": ""d56997a2-1c28-4b6b-afd3-9c331eb77067"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Perspective"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d97a5f1c-7f1a-4823-9163-82a4d4eef803"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Perspective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""11c81930-8cf3-4c0e-9a43-9b1603c29dfb"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Perspective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""84b49f17-d49c-4171-8d1b-65171102aa62"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Perspective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""28eb130d-4fa4-4c10-936f-333d483f392c"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Perspective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerKeyBoard
        m_PlayerKeyBoard = asset.FindActionMap("PlayerKeyBoard", throwIfNotFound: true);
        m_PlayerKeyBoard_Move = m_PlayerKeyBoard.FindAction("Move", throwIfNotFound: true);
        m_PlayerKeyBoard_Jump = m_PlayerKeyBoard.FindAction("Jump", throwIfNotFound: true);
        m_PlayerKeyBoard_Sliding = m_PlayerKeyBoard.FindAction("Sliding", throwIfNotFound: true);
        // PlayerGamePad
        m_PlayerGamePad = asset.FindActionMap("PlayerGamePad", throwIfNotFound: true);
        m_PlayerGamePad_Move = m_PlayerGamePad.FindAction("Move", throwIfNotFound: true);
        m_PlayerGamePad_Jump = m_PlayerGamePad.FindAction("Jump", throwIfNotFound: true);
        m_PlayerGamePad_Sliding = m_PlayerGamePad.FindAction("Sliding", throwIfNotFound: true);
        m_PlayerGamePad_Perspective = m_PlayerGamePad.FindAction("Perspective", throwIfNotFound: true);
    }

    ~@GameInputs()
    {
        UnityEngine.Debug.Assert(!m_PlayerKeyBoard.enabled, "This will cause a leak and performance issues, GameInputs.PlayerKeyBoard.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerGamePad.enabled, "This will cause a leak and performance issues, GameInputs.PlayerGamePad.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerKeyBoard
    private readonly InputActionMap m_PlayerKeyBoard;
    private List<IPlayerKeyBoardActions> m_PlayerKeyBoardActionsCallbackInterfaces = new List<IPlayerKeyBoardActions>();
    private readonly InputAction m_PlayerKeyBoard_Move;
    private readonly InputAction m_PlayerKeyBoard_Jump;
    private readonly InputAction m_PlayerKeyBoard_Sliding;
    public struct PlayerKeyBoardActions
    {
        private @GameInputs m_Wrapper;
        public PlayerKeyBoardActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerKeyBoard_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerKeyBoard_Jump;
        public InputAction @Sliding => m_Wrapper.m_PlayerKeyBoard_Sliding;
        public InputActionMap Get() { return m_Wrapper.m_PlayerKeyBoard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerKeyBoardActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerKeyBoardActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerKeyBoardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerKeyBoardActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sliding.started += instance.OnSliding;
            @Sliding.performed += instance.OnSliding;
            @Sliding.canceled += instance.OnSliding;
        }

        private void UnregisterCallbacks(IPlayerKeyBoardActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sliding.started -= instance.OnSliding;
            @Sliding.performed -= instance.OnSliding;
            @Sliding.canceled -= instance.OnSliding;
        }

        public void RemoveCallbacks(IPlayerKeyBoardActions instance)
        {
            if (m_Wrapper.m_PlayerKeyBoardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerKeyBoardActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerKeyBoardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerKeyBoardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerKeyBoardActions @PlayerKeyBoard => new PlayerKeyBoardActions(this);

    // PlayerGamePad
    private readonly InputActionMap m_PlayerGamePad;
    private List<IPlayerGamePadActions> m_PlayerGamePadActionsCallbackInterfaces = new List<IPlayerGamePadActions>();
    private readonly InputAction m_PlayerGamePad_Move;
    private readonly InputAction m_PlayerGamePad_Jump;
    private readonly InputAction m_PlayerGamePad_Sliding;
    private readonly InputAction m_PlayerGamePad_Perspective;
    public struct PlayerGamePadActions
    {
        private @GameInputs m_Wrapper;
        public PlayerGamePadActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerGamePad_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerGamePad_Jump;
        public InputAction @Sliding => m_Wrapper.m_PlayerGamePad_Sliding;
        public InputAction @Perspective => m_Wrapper.m_PlayerGamePad_Perspective;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGamePad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGamePadActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerGamePadActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sliding.started += instance.OnSliding;
            @Sliding.performed += instance.OnSliding;
            @Sliding.canceled += instance.OnSliding;
            @Perspective.started += instance.OnPerspective;
            @Perspective.performed += instance.OnPerspective;
            @Perspective.canceled += instance.OnPerspective;
        }

        private void UnregisterCallbacks(IPlayerGamePadActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sliding.started -= instance.OnSliding;
            @Sliding.performed -= instance.OnSliding;
            @Sliding.canceled -= instance.OnSliding;
            @Perspective.started -= instance.OnPerspective;
            @Perspective.performed -= instance.OnPerspective;
            @Perspective.canceled -= instance.OnPerspective;
        }

        public void RemoveCallbacks(IPlayerGamePadActions instance)
        {
            if (m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerGamePadActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerGamePadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerGamePadActions @PlayerGamePad => new PlayerGamePadActions(this);
    public interface IPlayerKeyBoardActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSliding(InputAction.CallbackContext context);
    }
    public interface IPlayerGamePadActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSliding(InputAction.CallbackContext context);
        void OnPerspective(InputAction.CallbackContext context);
    }
}
